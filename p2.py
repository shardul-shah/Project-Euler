"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

"""

def main():
	# This solution uses dynamic programming for optimization.
	FibonacciArray = [0, 1]
	i = 3
	evenFibonacciArray = []
	while(True):
		FibVal = fibonacci(i, FibonacciArray)

		if FibVal > 4000000:
			FibonacciArray.pop()
			break

		if FibVal % 2 == 0:
			evenFibonacciArray.append(FibVal)
		i+=1

	total = sum(evenFibonacciArray)
	print("The answer to problem 2 is: " + str(total) + ".")

def fibonacci(n, FibonacciArray):
	if n<=0:
		print("Incorrect input.")

	elif n > len(FibonacciArray):
		temp = fibonacci(n-1, FibonacciArray) + fibonacci(n-2, FibonacciArray)
		FibonacciArray.append(temp)
		return temp

	else:
		return FibonacciArray[n-1]  


if __name__ == "__main__":
	main()

